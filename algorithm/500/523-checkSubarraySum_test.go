package algorithm_500

import "testing"

func Test_checkSubarraySum(t *testing.T) {
	type args struct {
		nums []int
		k    int
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{"t1", args{[]int{23, 2, 4, 6, 7}, 6}, true},
		{"t2", args{[]int{23, 2, 6, 4, 7}, 6}, true},
		{"t3", args{[]int{23, 2, 6, 4, 7}, 13}, false},
		{"t4", args{[]int{2, 4, 3}, 6}, true},
		{"t5", args{[]int{487, 450, 324, 15, 29, 242, 133, 397, 42, 61, 178, 411, 102, 513, 446, 32, 442, 380, 454, 72, 255, 312, 28, 499, 132, 467, 200, 415, 246, 227, 129, 502, 353, 507, 294, 68, 81, 447, 14, 395, 454, 271, 449, 108, 429, 88, 190, 297, 270, 121, 229, 255, 404, 394, 115, 9, 186, 165, 368, 11, 265, 164, 81, 145, 15, 505, 437, 483, 217, 506, 80, 505, 267, 468, 45, 74, 178, 6, 36, 290, 80, 107, 304, 235, 474, 185, 120, 117, 412, 505, 133, 403, 323, 482, 458, 306, 192, 18, 369, 433, 75, 333, 63, 180, 453, 48, 113, 257, 408, 149, 447, 288, 3, 268, 488, 328, 294, 400, 210, 230, 289, 281, 322, 270, 451, 402, 170, 27, 360, 485, 487, 437, 187, 196, 220, 168, 449, 501, 509, 493, 139, 501, 474, 373, 358, 113, 7, 508, 80, 194, 319, 179, 115, 517, 129, 69, 275, 350, 481, 292, 60, 274, 189, 514, 34, 296, 152, 25, 496, 431, 166, 367, 190, 379, 130, 304, 15, 355, 219, 71, 49, 38, 63, 249, 211, 385, 360, 312, 298, 475, 88, 378, 280, 203, 368, 255, 59, 67, 417, 33, 482, 29, 374, 332, 116, 329, 406, 30, 409, 343, 85, 197, 283, 219, 295, 444, 372, 420, 96, 291, 522, 381, 507, 400, 410, 336, 487, 44, 333, 286, 382, 344, 515, 248, 187, 183, 304, 163, 494, 134, 53, 256, 253, 507, 274, 45, 344, 418, 32, 510, 447, 500, 270, 26, 322, 120, 518, 508, 167, 326, 282, 42, 258, 426, 405, 53, 48, 193, 210, 291, 76, 443, 296, 432, 240, 198, 457, 109, 228, 142, 255, 81, 333, 99, 161, 40, 322, 497, 209, 269, 323, 449, 144, 88, 228, 295, 242, 409, 389, 421, 27, 78, 504, 180, 369, 210, 67, 232, 387, 304, 160, 352, 354, 86, 309, 459, 226, 372, 120, 302, 393, 141, 483, 147, 306, 420, 23, 200, 256, 306, 19, 391, 344, 258, 299, 322, 27, 227, 523, 307, 434, 502, 170, 195, 178, 262, 262, 105, 139, 289, 480, 416, 24, 375, 381, 47, 395, 225, 412, 303, 308, 39, 438, 16, 510, 38, 225, 201, 509, 314, 366, 157, 30, 101, 96, 503, 147, 413, 129, 507, 381, 326, 297, 523, 141, 157, 50, 177, 394, 490, 165, 425, 75, 260, 409, 290, 519, 517, 526, 155, 505, 199, 401, 87, 61, 239, 201, 393, 12, 380, 451, 260, 484, 344, 268, 420, 524, 515, 484, 407, 156, 435, 300, 288, 400, 389, 387, 135, 261, 199, 243, 416, 165, 371, 49, 291, 83, 276, 510, 383, 134, 387, 200, 231, 48, 424, 408, 178, 120, 276, 439, 25, 210, 226, 373, 205, 321, 30, 23, 3, 267, 6, 46, 129, 12, 83, 17, 299, 236, 479, 66, 145, 411, 46, 213, 468, 266, 366, 212, 429, 39, 128, 366, 229, 119, 467, 141, 135, 12, 100, 356, 352, 198, 143, 134, 437, 299, 218, 237, 469, 334, 221, 65, 426, 382, 15, 438, 201, 255, 342, 84, 246, 150, 498, 14, 187, 388, 450, 382, 308, 485, 130, 451, 497, 104, 90, 358, 412, 327, 79, 351, 424, 184, 117, 446, 44, 270, 526, 235, 132, 389, 302, 81, 489, 87, 212, 240, 196, 217, 114, 56, 228, 244, 128, 500, 229, 56, 278, 313, 22, 186, 486, 489, 455, 48, 388, 129, 500, 515, 257, 151, 145, 100, 285, 213, 143, 200, 273, 205, 19, 226, 505, 185, 348, 178, 475, 180, 298, 460, 134, 14, 164, 333, 390, 363, 319, 17, 223, 240, 128, 2, 44, 339, 142, 51, 37, 336, 113, 464, 52, 106, 427, 291, 250, 469, 415, 122, 96, 20, 360, 444, 238, 63, 374, 427, 23, 58, 125, 291, 349, 311, 54, 503, 283, 256, 133, 394, 72, 348, 254, 193, 401, 425, 436, 347, 250, 73, 513, 325, 427, 82, 470, 115, 87, 34, 139, 358, 83, 252, 471, 385, 144, 400, 468, 497, 25, 409, 365, 84, 268, 288, 254, 184, 17, 31, 172, 34, 80, 406, 93, 459, 79, 19, 415, 124, 84, 178, 116, 309, 117, 4, 310, 256, 53, 353, 168, 91, 12, 294, 347, 142, 377, 310, 113, 44, 117, 443, 216, 450, 240, 393, 398, 111, 5, 413, 61, 200, 114, 147, 428, 503, 13, 270, 284, 67, 21, 459, 6, 101, 252, 380, 339, 246, 83, 486, 48, 408, 266, 238, 499, 134, 385, 428, 112, 417, 197, 39, 393, 213, 426, 296, 175, 70, 72, 500, 65, 351, 378, 487, 307, 294, 74, 468, 487, 79, 177, 247, 21, 339, 517, 358, 328, 289, 194, 154, 289, 94, 109, 438, 521, 266, 203, 282, 516, 207, 376, 385, 208, 45, 417, 465, 415, 398, 505, 322, 238, 397, 232, 225, 83, 228, 233, 117, 140, 505, 435, 373, 6, 445, 509, 213, 364, 434, 333, 235, 114, 275, 116, 351, 176, 522, 412, 450, 110, 40, 448, 176, 443, 327, 341, 384, 520, 166, 44, 299, 473, 367, 352, 36, 51, 426, 229, 27, 422, 352, 285, 149, 177, 97, 389, 405, 7, 93, 5, 480, 439, 240, 439, 99, 500, 371, 105, 192, 236, 148, 184, 467, 514, 494, 178, 207, 298, 342, 150, 431, 222, 39, 388, 37, 493, 370, 324, 494, 504, 209, 526, 412, 372, 73, 55, 517, 330, 129, 434, 100, 358, 124, 89, 110, 227, 352, 290, 431, 114, 235, 195, 476, 337, 280, 451, 163, 207, 193, 498, 220, 438, 25, 354, 346, 296, 162, 487, 364, 432, 267, 330, 248, 237, 503, 336, 317, 166, 80, 261, 408, 519, 109, 476, 272, 159, 471, 187, 202, 335, 316, 391, 406, 108, 79, 426, 198, 16, 408, 355, 451, 500, 499, 9, 418, 219, 522, 303, 248, 295, 386, 41, 400, 158, 425, 352, 357, 383, 168, 21, 130, 479, 38, 252, 55, 19, 36, 397, 454, 464, 359, 118, 472, 212, 105, 429, 361, 117, 247, 37, 372, 153, 352, 287, 485, 405}, 1532966398}, false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := checkSubarraySum(tt.args.nums, tt.args.k); got != tt.want {
				t.Errorf("checkSubarraySum() = %v, want %v", got, tt.want)
			}
		})
	}
}
